{"meta":{"title":"Title","subtitle":null,"description":null,"author":"Oneway","url":"https://chunkil.github.io/blog"},"pages":[],"posts":[{"title":"Closure(클로저)","slug":"JavaScript/test","date":"2018-03-15T09:50:10.000Z","updated":"2018-03-20T09:43:31.441Z","comments":true,"path":"2018/03/15/JavaScript/test/","link":"","permalink":"https://chunkil.github.io/blog/2018/03/15/JavaScript/test/","excerpt":"","text":"Closures are one of the most powerful features of JavaScript. JavaScript allows for the nesting of functions and grants the inner function full access to all the variables and functions defined inside the outer function (and all other variables and functions that the outer function has access to). However, the outer function does not have access to the variables and functions defined inside the inner function. This provides a sort of encapsulation for the variables of the inner function. Also, since the inner function has access to the scope of the outer function, the variables and functions defined in the outer function will live longer than the duration of the inner function execution, if the inner function manages to survive beyond the life of the outer function. A closure is created when the inner function is somehow made available to any scope outside the outer function.(출처 : MDN Web Docs) 아래는 Closure의 예시이다. 123456789101112var countFunc = function() &#123; var counter = 0; return function() &#123; return ++counter; &#125;&#125;var test = countFunc();console.log(test()); //1console.log(test()); //2console.log(test()); //3 test 변수는 counter를 증가시키고 return하는 함수이기 때문에 test()를 호출하면 counter가 1씩 증가한다.countFunc()가 종료 되어도 내부함수에서 counter의 변수에 접근이 가능하다. test()를 호출하면 counter가 1씩 증가한다.closure가 형성되었기 때문이다. 아래처럼 object의 method로 사용할 수도 있다. 123456789101112131415161718192021var userInfo = function(username) &#123; return &#123; setUsername: function(name) &#123; username = name; &#125;, getUsername: function() &#123; return username; &#125; &#125;&#125; var user1 = userInfo('Oneway');var user2 = userInfo('Hong');console.log(user1.getUsername()); //'Oneway'console.log(user2.getUsername()); //'Hong'user2.setUsername('HongHongHong');console.log(user1.getUsername()); //'Oneway'console.log(user2.getUsername()); //'HongHongHong' 외부 함수에서 username을 받고외부 함수 return 값은 object이다.object의 method만을 통하여 username에 접근이 가능하다.user1, user2와 같이 변수를 다르게 여러 user의 정보에 접근 가능하다. closure에 관하여 더 많은 정보는 아래 링크를 확인!루프 내에서 closure 생성 시 오류 등 더 많은 정보가 있다.https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functionshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://chunkil.github.io/blog/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://chunkil.github.io/blog/tags/JavaScript/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-03-01T18:34:19.747Z","updated":"2018-03-01T18:34:19.748Z","comments":true,"path":"2018/03/02/hello-world/","link":"","permalink":"https://chunkil.github.io/blog/2018/03/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}